r
overall_mean <- mean(data[[meas]])
# Operator SS
op_means <- tapply(data[[meas]], data[[operator]], mean)
SS_oper_error <- sum((op_means - overall_mean)^2) * num_parts * r
# Part SS
part_means <- tapply(data[[meas]], data[[part]], mean)
SS_part_error <- sum((part_means - overall_mean)^2) * num_opers * r
# Total SS
SS_total_error <- sum((data[[meas]] - overall_mean)^2)
# Equipment (repeatability)
op_part_means <- aggregate(data[[meas]],
by = list(data[[operator]], data[[part]]),
FUN = mean)
merged <- merge(data, op_part_means,
by.x = c(operator, part),
by.y = c("Group.1", "Group.2"))
SS_equip_error <- sum((merged$x - merged[[meas]])^2) # deviation within op*part
# Operator*Part interaction
SS_op_part_error <- SS_total_error - (SS_oper_error + SS_part_error + SS_equip_error)
# No Operator*Part interaction
SS_no_interaction <- (SS_op_part_error + SS_equip_error)/
((num_opers - 1) * (num_parts - 1) + (num_parts * num_opers * (reps - 1)))
# No Operator*Part interaction
SS_no_interaction <- (SS_op_part_error + SS_equip_error)/
((num_opers - 1) * (num_parts - 1) + (num_parts * num_opers * (r - 1)))
SS_no_interaction
# No Operator*Part interaction
SS_no_interaction <- (SS_op_part_error + SS_equip_error)
SS_no_interaction
df = read_excel("C://Users//warre//Documents//R_Projects//six_sigma_calcs.xlsx") %>% pivot_longer(c(Trial1,Trial2,Trial3))
head(df)
ss_calcs(df,'Parts','Technician','value')
anova_var_calcs(df,'Parts','Technician','value')
xbar_repeat(df,'Parts','Technician','value')
part
operator
meas
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
# number of replicates per part/operator
rep_counts <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = length)
num_parts <- length(unique(data[[part]]))
num_opers <- length(unique(data[[operator]]))
expected_cells <- num_parts * num_opers
rep_counts
reps
g1
g1 <- num_parts * num_opers
d <- d2_minitab_df(m = reps, g = g1)
if (nrow(rep_counts) != expected_cells) {
stop("Balanced studies require every operator to measure every part.")
}
if (length(unique(rep_counts$x)) != 1) {
stop("Each part must have an equal number of replicates")
}
reps <- unique(rep_counts$x)
reps
g1 <- num_parts * num_opers
d <- d2_minitab_df(m = reps, g = g1)
xbar_rep <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = function(x) (max(x) - min(x)) / (num_parts * num_opers))
xbar_rep
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
head(data)
grr_calc(data,'Part','Operator','Meas',LSL = 838.6, USL = 838.8)
grr_calc(data,'Part','Operator','Meas',LSL = 838.6, USL = 838.8, method = 'xbar_r')
xbar_rep
sqrt(4)
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
grr_calc(data,'Part','Operator','Meas',LSL = 838.6, USL = 838.8, method = 'xbar_r')
grr_calc(data,'Part','Operator','Meas',LSL = 838.6, USL = 838.8)
grr_calc(data,'Part','Operator','Meas',LSL = 838.6, USL = 838.8, method = 'xbar_r')
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
grr_calc(data,'Part','Operator','Meas',LSL = 838.6, USL = 838.8, method = 'xbar_r')
sqrt(2)
head(data)
part = 'Part'
meas = 'Meas'
operator = 'Operator'
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
rep_counts <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = length)
num_parts <- length(unique(data[[part]]))
num_opers <- length(unique(data[[operator]]))
num_parts
num_operators
num_opers
if (nrow(rep_counts) != expected_cells) {
stop("Balanced studies require every operator to measure every part.")
}
if (length(unique(rep_counts$x)) != 1) {
stop("Each part must have an equal number of replicates")
}
r <- unique(rep_counts$x)
r
d <- d2_minitab_df(m = num_opers, g = 1)
d
xbar_i <- aggregate(data[[meas]],
by = list(data[[operator]]),
FUN = mean)
xbar_i
repeatability <- xbar_repeat(data, part, operator, meas)
repeatability
reproducibility <- max(sqrt((x_diff / d)^2 - (repeatability / (num_parts * r))), 0)
x_diff <- max(xbar_i$x) - min(xbar_i$x)
repeatability <- xbar_repeat(data, part, operator, meas)
reproducibility <- max(sqrt((x_diff / d)^2 - (repeatability / (num_parts * r))), 0)
reproducibility
reproducibility <- max(sqrt((x_diff / d)^2 - (repeatability^2 / (num_parts * r))), 0)
reproducibility
reproducibility <- max(sqrt((x_diff / d)^2 - (repeatability / (num_parts * r))), 0)
df = read_csv("C://Users//warre//Downloads//gage_rr_sample_data.csv")
head(df)
grr_calc(df,'Part','Operator','Measurement', method = 'xbar_r')
data = df
head(data)
part = 'Part'
operator = 'Operator'
meas = 'Measurement'
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
rep_counts <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = length)
num_parts <- length(unique(data[[part]]))
num_opers <- length(unique(data[[operator]]))
expected_cells <- num_parts * num_opers
if (nrow(rep_counts) != expected_cells) {
stop("Balanced studies require every operator to measure every part.")
}
if (length(unique(rep_counts$x)) != 1) {
stop("Each part must have an equal number of replicates")
}
r <- unique(rep_counts$x)
num_parts
num_opers
r
d <- d2_minitab_df(m = num_opers, g = 1)
d
repeatability <- xbar_repeat(data, part, operator, meas)
repeatability
sqrt(0.0001259158)
xbar_i <- aggregate(data[[meas]],
by = list(data[[operator]]),
FUN = mean)
x_diff <- max(xbar_i$x) - min(xbar_i$x)
x_diff
d
r
num_parts
reproducibility <- max(sqrt((x_diff / d)^2 - (repeatability / (num_parts * r))), 0)
reproducibility
0.002640738^2
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
head(data)
grr_calc(data,'Part','Operator','Meas',method = 'xbar_r')
d2_minitab_df(3,1)
1.509170*2
d2_integral(3)
reproducibility <- max(sqrt((x_diff / 1.69)^2 - (repeatability / (num_parts * r)))^2, 0)
reproducibility
head(data)
part
operator
meas
meas = 'Meas'
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
# number of replicates per part/operator
rep_counts <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = length)
num_parts <- length(unique(data[[part]]))
num_opers <- length(unique(data[[operator]]))
expected_cells <- num_parts * num_opers
if (nrow(rep_counts) != expected_cells) {
stop("Balanced studies require every operator to measure every part.")
}
if (length(unique(rep_counts$x)) != 1) {
stop("Each part must have an equal number of replicates")
}
reps <- unique(rep_counts$x)
g1 <- num_parts * num_opers
d <- d2_minitab_df(m = reps, g = g1)
d
xbar_rep <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = function(x) (max(x) - min(x)) / (num_parts * num_opers))
repeatability <- (sum(xbar_rep$x) / d)^2
repeatability
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
rep_counts <- aggregate(data[[meas]],
by = list(data[[part]], data[[operator]]),
FUN = length)
num_parts <- length(unique(data[[part]]))
num_opers <- length(unique(data[[operator]]))
expected_cells <- num_parts * num_opers
if (nrow(rep_counts) != expected_cells) {
stop("Balanced studies require every operator to measure every part.")
}
if (length(unique(rep_counts$x)) != 1) {
stop("Each part must have an equal number of replicates")
}
r <- unique(rep_counts$x)
if (num_opers == 1) return(0)
d <- d2_minitab_df(m = num_opers, g = 1)
d
xbar_i <- aggregate(data[[meas]],
by = list(data[[operator]]),
FUN = mean)
x_diff <- max(xbar_i$x) - min(xbar_i$x)
repeatability <- xbar_repeat(data, part, operator, meas)
reproducibility <- max(sqrt((x_diff / 1.69)^2 - (repeatability / (num_parts * r)))^2, 0)
reproducibility
d <- d2_minitab_df(m = reps, g = g1)
d
reproducibility <- max(sqrt((x_diff / d)^2 - (repeatability / (num_parts * r)))^2, 0)
reproducibility
m
num_opers
d <- d2_minitab_df(m = num_opers, g = 1)
d
reproducibility <- max(sqrt((x_diff / 1.9115)^2 - (repeatability / (num_parts * r)))^2, 0)
reproducibility
d2_integral(3)
dchisq(3,2)
pchisq(3,2)
qchisq(3,2)
pchisq(3,2,lower.tail = F)
d2_minitab_df(5,5)
d <- d_table[d_table$g == g & d_table$m == m, "d2"]
## code to prepare `DATASET` dataset goes here
g = rep(1:20, each = 19)
m = rep(2:20, times = 20)
d2 = c(1.41421, 1.91155, 2.23887, 2.48124, 2.67253, 2.82981, 2.96288, 3.07794, 3.17905, 3.26909,
3.35016, 3.42378, 3.49116, 3.55333, 3.61071, 3.66422, 3.71424, 3.76118, 3.80537, 1.27931,
1.80538, 2.15069, 2.40484, 2.60438, 2.76779, 2.90562, 3.02446, 3.12869, 3.22134, 3.30463,
3.38017, 3.44922, 3.51287, 3.57156, 3.62625, 3.67734, 3.72524, 3.77032, 1.23105, 1.76858,
2.12049, 2.37883, 2.58127, 2.74681, 2.88628, 3.00643, 3.11173, 3.20526, 3.28931, 3.3655,
3.43512, 3.49927, 3.55842, 3.61351, 3.66495, 3.71319, 3.75857, 1.20621, 1.74989, 2.10522,
2.36571, 2.56964, 2.73626, 2.87656, 2.99737, 3.10321, 3.1972, 3.28163, 3.35815, 3.42805,
3.49246, 3.55183, 3.60712, 3.65875, 3.70715, 3.75268, 1.19105, 1.73857, 2.09601, 2.35781,
2.56263, 2.72991, 2.87071, 2.99192, 3.09808, 3.19235, 3.27701, 3.35372, 3.42381, 3.48836,
3.54787, 3.60328, 3.65502, 3.70352, 3.74914, 1.18083, 1.73099, 2.08985, 2.35253, 2.55795,
2.72567, 2.8668, 2.98829, 3.09467, 3.18911, 3.27392, 3.35077, 3.42097, 3.48563, 3.54522,
3.60072, 3.65253, 3.70109, 3.74678, 1.17348, 1.72555, 2.08543, 2.34875, 2.5546, 2.72263,
2.86401, 2.98568, 3.09222, 3.18679, 3.27172, 3.34866, 3.41894, 3.48368, 3.54333, 3.59888,
3.65075, 3.69936, 3.74509, 1.16794, 1.72147, 2.08212, 2.34591, 2.55208, 2.72036, 2.86192,
2.98373, 3.09039, 3.18506, 3.27006, 3.34708, 3.41742, 3.48221, 3.54192, 3.59751, 3.64941,
3.69806, 3.74382, 1.16361, 1.71828, 2.07953, 2.3437, 2.55013, 2.71858, 2.86028, 2.98221,
3.08896, 3.1837, 3.26878, 3.34585, 3.41624, 3.48107, 3.54081, 3.59644, 3.64838, 3.69705,
3.74284, 1.16014, 1.71573, 2.07746, 2.34192, 2.54856, 2.71717, 2.85898, 2.981, 3.08781,
3.18262, 3.26775, 3.34486, 3.41529, 3.48016, 3.53993, 3.59559, 3.64755, 3.69625, 3.74205,
1.15729, 1.71363, 2.07577, 2.34048, 2.54728, 2.716, 2.85791, 2.98, 3.08688, 3.18174,
3.2669, 3.34406, 3.41452, 3.47941, 3.53921, 3.59489, 3.64687, 3.69558, 3.74141, 1.1549,
1.71189, 2.07436, 2.33927, 2.54621, 2.71504, 2.85702, 2.97917, 3.0861, 3.181, 3.2662,
3.34339, 3.41387, 3.47879, 3.53861, 3.5943, 3.6463, 3.69503, 3.74087, 1.15289, 1.71041,
2.07316, 2.33824, 2.5453, 2.71422, 2.85627, 2.97847, 3.08544, 3.18037, 3.26561, 3.34282,
3.41333, 3.47826, 3.5381, 3.59381, 3.64582, 3.69457, 3.74041, 1.15115, 1.70914, 2.07213,
2.33737, 2.54452, 2.71351, 2.85562, 2.97787, 3.08487, 3.17984, 3.2651, 3.34233, 3.41286,
3.47781, 3.53766, 3.59339, 3.64541, 3.69417, 3.74002, 1.14965, 1.70804, 2.07125, 2.33661,
2.54385, 2.7129, 2.85506, 2.97735, 3.08438, 3.17938, 3.26465, 3.34191, 3.41245, 3.47742,
3.53728, 3.59302, 3.64505, 3.69382, 3.73969, 1.14833, 1.70708, 2.07047, 2.33594, 2.54326,
2.71237, 2.85457, 2.97689, 3.08395, 3.17897, 3.26427, 3.34154, 3.4121, 3.47707, 3.53695,
3.5927, 3.64474, 3.69351, 3.73939, 1.14717, 1.70623, 2.06978, 2.33535, 2.54274, 2.7119,
2.85413, 2.97649, 3.08358, 3.17861, 3.26393, 3.34121, 3.41178, 3.47677, 3.53666, 3.59242,
3.64447, 3.69325, 3.73913, 1.14613, 1.70547, 2.06917, 2.33483, 2.54228, 2.71148, 2.85375,
2.97613, 3.08324, 3.17829, 3.26362, 3.34092, 3.4115, 3.4765, 3.5364, 3.59216, 3.64422,
3.69301, 3.7389, 1.1452, 1.7048, 2.06862, 2.33436, 2.54187, 2.71111, 2.85341, 2.97581,
3.08294, 3.17801, 3.26335, 3.34066, 3.41125, 3.47626, 3.53617, 3.59194, 3.644, 3.6928,
3.73869, 1.14437, 1.70419, 2.06813, 2.33394, 2.54149, 2.71077, 2.8531, 2.97552, 3.08267,
3.17775, 3.26311, 3.34042, 3.41103, 3.47605, 3.53596, 3.59174, 3.6438, 3.6926, 3.7385
)
d_table = data.frame(g = g,
m = m,
d2 = d2)
usethis::use_data(g, m, d2, d_table, internal = TRUE)
g = rep(1:20, each = 19)
m = rep(2:20, times = 20)
d2 = c(1.41421, 1.91155, 2.23887, 2.48124, 2.67253, 2.82981, 2.96288, 3.07794, 3.17905, 3.26909,
3.35016, 3.42378, 3.49116, 3.55333, 3.61071, 3.66422, 3.71424, 3.76118, 3.80537, 1.27931,
1.80538, 2.15069, 2.40484, 2.60438, 2.76779, 2.90562, 3.02446, 3.12869, 3.22134, 3.30463,
3.38017, 3.44922, 3.51287, 3.57156, 3.62625, 3.67734, 3.72524, 3.77032, 1.23105, 1.76858,
2.12049, 2.37883, 2.58127, 2.74681, 2.88628, 3.00643, 3.11173, 3.20526, 3.28931, 3.3655,
3.43512, 3.49927, 3.55842, 3.61351, 3.66495, 3.71319, 3.75857, 1.20621, 1.74989, 2.10522,
2.36571, 2.56964, 2.73626, 2.87656, 2.99737, 3.10321, 3.1972, 3.28163, 3.35815, 3.42805,
3.49246, 3.55183, 3.60712, 3.65875, 3.70715, 3.75268, 1.19105, 1.73857, 2.09601, 2.35781,
2.56263, 2.72991, 2.87071, 2.99192, 3.09808, 3.19235, 3.27701, 3.35372, 3.42381, 3.48836,
3.54787, 3.60328, 3.65502, 3.70352, 3.74914, 1.18083, 1.73099, 2.08985, 2.35253, 2.55795,
2.72567, 2.8668, 2.98829, 3.09467, 3.18911, 3.27392, 3.35077, 3.42097, 3.48563, 3.54522,
3.60072, 3.65253, 3.70109, 3.74678, 1.17348, 1.72555, 2.08543, 2.34875, 2.5546, 2.72263,
2.86401, 2.98568, 3.09222, 3.18679, 3.27172, 3.34866, 3.41894, 3.48368, 3.54333, 3.59888,
3.65075, 3.69936, 3.74509, 1.16794, 1.72147, 2.08212, 2.34591, 2.55208, 2.72036, 2.86192,
2.98373, 3.09039, 3.18506, 3.27006, 3.34708, 3.41742, 3.48221, 3.54192, 3.59751, 3.64941,
3.69806, 3.74382, 1.16361, 1.71828, 2.07953, 2.3437, 2.55013, 2.71858, 2.86028, 2.98221,
3.08896, 3.1837, 3.26878, 3.34585, 3.41624, 3.48107, 3.54081, 3.59644, 3.64838, 3.69705,
3.74284, 1.16014, 1.71573, 2.07746, 2.34192, 2.54856, 2.71717, 2.85898, 2.981, 3.08781,
3.18262, 3.26775, 3.34486, 3.41529, 3.48016, 3.53993, 3.59559, 3.64755, 3.69625, 3.74205,
1.15729, 1.71363, 2.07577, 2.34048, 2.54728, 2.716, 2.85791, 2.98, 3.08688, 3.18174,
3.2669, 3.34406, 3.41452, 3.47941, 3.53921, 3.59489, 3.64687, 3.69558, 3.74141, 1.1549,
1.71189, 2.07436, 2.33927, 2.54621, 2.71504, 2.85702, 2.97917, 3.0861, 3.181, 3.2662,
3.34339, 3.41387, 3.47879, 3.53861, 3.5943, 3.6463, 3.69503, 3.74087, 1.15289, 1.71041,
2.07316, 2.33824, 2.5453, 2.71422, 2.85627, 2.97847, 3.08544, 3.18037, 3.26561, 3.34282,
3.41333, 3.47826, 3.5381, 3.59381, 3.64582, 3.69457, 3.74041, 1.15115, 1.70914, 2.07213,
2.33737, 2.54452, 2.71351, 2.85562, 2.97787, 3.08487, 3.17984, 3.2651, 3.34233, 3.41286,
3.47781, 3.53766, 3.59339, 3.64541, 3.69417, 3.74002, 1.14965, 1.70804, 2.07125, 2.33661,
2.54385, 2.7129, 2.85506, 2.97735, 3.08438, 3.17938, 3.26465, 3.34191, 3.41245, 3.47742,
3.53728, 3.59302, 3.64505, 3.69382, 3.73969, 1.14833, 1.70708, 2.07047, 2.33594, 2.54326,
2.71237, 2.85457, 2.97689, 3.08395, 3.17897, 3.26427, 3.34154, 3.4121, 3.47707, 3.53695,
3.5927, 3.64474, 3.69351, 3.73939, 1.14717, 1.70623, 2.06978, 2.33535, 2.54274, 2.7119,
2.85413, 2.97649, 3.08358, 3.17861, 3.26393, 3.34121, 3.41178, 3.47677, 3.53666, 3.59242,
3.64447, 3.69325, 3.73913, 1.14613, 1.70547, 2.06917, 2.33483, 2.54228, 2.71148, 2.85375,
2.97613, 3.08324, 3.17829, 3.26362, 3.34092, 3.4115, 3.4765, 3.5364, 3.59216, 3.64422,
3.69301, 3.7389, 1.1452, 1.7048, 2.06862, 2.33436, 2.54187, 2.71111, 2.85341, 2.97581,
3.08294, 3.17801, 3.26335, 3.34066, 3.41125, 3.47626, 3.53617, 3.59194, 3.644, 3.6928,
3.73869, 1.14437, 1.70419, 2.06813, 2.33394, 2.54149, 2.71077, 2.8531, 2.97552, 3.08267,
3.17775, 3.26311, 3.34042, 3.41103, 3.47605, 3.53596, 3.59174, 3.6438, 3.6926, 3.7385
)
d_table = data.frame(g = g,
m = m,
d2 = d2)
d <- d_table[d_table$g == g & d_table$m == m, "d2"]
d
d <- d2_minitab_df(m = num_opers, g = 1)
d
g
d <- d_table[d_table$g == 1 & d_table$m == num_opers, "d2"]
d
d <- d2_minitab_df(m = num_opers, g = 1)
d
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
head(data)
grr_calc(data,'Part','Operator','Meas',method = 'xbar_r')
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
grr_calc(data,'Part','Operator','Meas',method = 'xbar_r')
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
grr_calc(data,'Part','Operator','Meas',method = 'xbar_r')
data = data.frame(
SN = c(
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_02',
'SerialNumber_02'),
Operator = c(
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_02',
'Operator_02',
'Operator_02',
'Operator_02'),
Measure = c(
0.0172,
0.0177,
0.0155,
0.0159,
0.0174,
0.0181,
0.0152,
0.0176))
grr_calc(data, part = 'SN', operator = 'Operator', meas = 'Measure', LSL = .150, USL = .180, method = 'xbar_r')
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
runApp()
data = data.frame(
SN = c(
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_02',
'SerialNumber_02'),
Operator = c(
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_02',
'Operator_02',
'Operator_02',
'Operator_02'),
Measure = c(
0.0172,
0.0177,
0.0155,
0.0159,
0.0174,
0.0181,
0.0152,
0.0176))
head(data)
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
head(data)
part='Part'
operator='Operator'
meas = 'Meas'
LSL = 838.6
USL = 838.8
data <- validate_grr_inputs(data, part_col = part, operator_col = operator, measure_col = meas)
if (method == "anova") {
varComps <- anova_var_calcs(data, part, operator, meas)
anovaTable <- anova_table(data, part, operator, meas)
} else if (method == "xbar_r") {
varComps <- xbar_varcomps(data, part, operator, meas)
anovaTable <- NULL
} else {
stop("Supplied method is not supported. Use 'anova' or 'xbar_r'.")
}
method = 'anova'
if (method == "anova") {
varComps <- anova_var_calcs(data, part, operator, meas)
anovaTable <- anova_table(data, part, operator, meas)
} else if (method == "xbar_r") {
varComps <- xbar_varcomps(data, part, operator, meas)
anovaTable <- NULL
} else {
stop("Supplied method is not supported. Use 'anova' or 'xbar_r'.")
}
if (!is.null(LSL) && !is.null(USL) && USL <= LSL) {
stop("USL must be greater than LSL", call. = FALSE)
}
if (is.null(LSL) && !is.null(USL) && USL <= 0) {
stop("USL must be greater than 0", call. = FALSE)
}
# Build VarianceComponents data frame
VarianceComponents <- data.frame(matrix(unlist(varComps)))
VarianceComponents
row.names(VarianceComponents) <- names(varComps)
colnames(VarianceComponents) <- "VarComp"
VarianceComponents
TotalVariation <- VarianceComponents["total_var", ]
VarianceComponents["PercentContribution"] <- VarianceComponents$VarComp / TotalVariation
# Build GageEval data frame
GageEval <- data.frame(row.names = rownames(VarianceComponents))
GageEval["StdDev"] <- sqrt(VarianceComponents$VarComp)
GageEval["StudyVar"] <- GageEval$StdDev * 6
TotalStudyVar <- GageEval["total_var", "StudyVar"]
GageEval["PercentStudyVar"] <- GageEval$StudyVar / TotalStudyVar
GageEval
str(GageEval)
num_dist_cats <- sqrt(2) * (GageEval["part_to_part", "StdDev"] /
GageEval["repeatability", "StdDev"])
num_dist_cats_int <- floor(num_dist_cats)
num_dist_cats_int
method = 'xbar_r'
if (method == "anova") {
varComps <- anova_var_calcs(data, part, operator, meas)
anovaTable <- anova_table(data, part, operator, meas)
} else if (method == "xbar_r") {
varComps <- xbar_varcomps(data, part, operator, meas)
anovaTable <- NULL
} else {
stop("Supplied method is not supported. Use 'anova' or 'xbar_r'.")
}
if (!is.null(LSL) && !is.null(USL) && USL <= LSL) {
stop("USL must be greater than LSL", call. = FALSE)
}
if (is.null(LSL) && !is.null(USL) && USL <= 0) {
stop("USL must be greater than 0", call. = FALSE)
}
# Build VarianceComponents data frame
VarianceComponents <- data.frame(matrix(unlist(varComps)))
row.names(VarianceComponents) <- names(varComps)
colnames(VarianceComponents) <- "VarComp"
TotalVariation <- VarianceComponents["total_var", ]
VarianceComponents["PercentContribution"] <- VarianceComponents$VarComp / TotalVariation
# Build GageEval data frame
GageEval <- data.frame(row.names = rownames(VarianceComponents))
GageEval["StdDev"] <- sqrt(VarianceComponents$VarComp)
GageEval["StudyVar"] <- GageEval$StdDev * 6
TotalStudyVar <- GageEval["total_var", "StudyVar"]
GageEval["PercentStudyVar"] <- GageEval$StudyVar / TotalStudyVar
num_dist_cats <- sqrt(2) * (GageEval["part_to_part", "StdDev"] /
GageEval["repeatability", "StdDev"])
num_dist_cats_int <- floor(num_dist_cats)
num_dist_cats_int
data = read_excel("C://Users//warre//Downloads//RM13003_Data_CH.xlsx")
grr_calc(data,'Part','Operator','Meas',method='anova')
grr_calc(data,'Part','Operator','Meas',method='xbar_r')
runApp()
grr_calc(data,'Part','Operator','Meas', LSL = 838.6, USL = 838.8, method='xbar_r')
shiny::shinyApp(ui, server)
runApp('C:/Users/warre/Documents/R_Projects/gageRR/inst/app_batch')
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_devel()
runApp('C:/Users/warre/Documents/R_Projects/gageRR/inst/app_batch')
runApp('C:/Users/warre/Documents/R_Projects/gageRR/inst/app_batch')
shiny::runApp('inst/app_single')
runApp('inst/app_batch')
devtools::build()
devtools::build()
devtools::check_win_devel()
devtools::build()
shiny::runApp(system.file("app", package = "gageRR"))
runApp('inst/app_batch')
shiny::runApp(system.file("inst/app_batch", package = "gageRR"))
shiny::runApp(system.file("inst/app_batch/app", package = "gageRR"))
devtools::build_readme()
devtools::check()
