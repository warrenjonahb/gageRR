reproducibility = as.double(reproducibility),
total_grr = as.double(total_grr),
part_to_part = as.double(part_to_part),
total_var = as.double(total_var)))
}
anova_var_calcs(data = data2, part = SN, operator = Operator, meas = CN28_AFT_RUNOUT)
options(dplyr.summarise.inform = TRUE)
xbar_varcomps(data = data2, part = SN, operator = Operator, meas = CN28_AFT_RUNOUT)
anova_var_calcs(data = data2, part = SN, operator = Operator, meas = CN28_AFT_RUNOUT)
ss_calcs = function(data, part, operator = NULL, meas){
if (is.null(data$operator)){
data$operator = 'A'}
reps = data %>%
select({{part}}, {{operator}}) %>%
group_by({{part}}, {{operator}}) %>%
summarize(rep = n(), .groups = 'keep')
#Small correction here need equal number of reps across each operator/part combo
if (length(unique(reps$rep)) != 1) {
stop("Each part must have an equal number of replicates")
}
r = unique(reps$rep)
p = data %>%
select({{part}}) %>%
distinct() %>%
count()
t = data %>%
select({{operator}}) %>%
distinct() %>%
count()
SS_oper = data %>%
mutate(overall_mean = mean({{meas}})) %>%
group_by({{operator}}) %>%
mutate(op_mean = mean({{meas}})) %>%
mutate(sq_error = (op_mean - overall_mean)^2)
SS_oper_error = sum(SS_oper$sq_error)
SS_part = data %>%
mutate(overall_mean = mean({{meas}})) %>%
group_by({{part}}) %>%
mutate(part_mean = mean({{meas}})) %>%
mutate(sq_error = (part_mean -overall_mean)^2)
SS_part_error = sum(SS_part$sq_error)
SS_total = data %>%
mutate(overall_mean = mean({{meas}})) %>%
mutate(sq_error = ({{meas}} - overall_mean)^2)
SS_total_error = sum(SS_total$sq_error)
SS_equip = data %>%
group_by({{operator}}, {{part}}) %>%
mutate(op_part_mean = mean({{meas}})) %>%
mutate(sq_error = (op_part_mean - {{meas}})^2)
SS_equip_error = sum(SS_equip$sq_error)
SS_op_part_error = SS_total_error - (SS_oper_error + SS_part_error + SS_equip_error)
return(list(reps = as.integer(r), num_parts = as.integer(p), num_opers = as.integer(t),
SS_oper_error = as.double(SS_oper_error),
SS_part_error = as.double(SS_part_error),
SS_equip_error = as.double(SS_equip_error),
SS_op_part_error = as.double(SS_op_part_error),
SS_total_error = as.double(SS_total_error)))
}
#Change inputs here to requirements to veed into ss_calcs
anova_var_calcs = function(data, part, operator = NULL, meas)  {
ss_comp = ss_calcs(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
reps = ss_comp$reps
num_parts = ss_comp$num_parts
num_opers = ss_comp$num_opers
SS_oper_error = ss_comp$SS_oper_error
SS_part_error = ss_comp$SS_part_error
SS_equip_error = ss_comp$SS_equip_error
SS_op_part_error = ss_comp$SS_op_part_error
SS_total_error = ss_comp$SS_total_error
MS_oper = SS_oper_error/(num_opers - 1)
MS_part = SS_part_error/(num_parts - 1)
MS_oper_part = SS_op_part_error/((num_opers - 1)*(num_parts - 1))
MS_equip = SS_equip_error / (num_parts * num_opers * (reps-1))
#compute p-val part_oper interaction
F_stat = MS_oper_part/(MS_equip)
p_val = pf(F_stat[[1]],
df1 = as.integer((num_opers - 1)*(num_parts - 1)),
df2 = as.integer(num_parts * num_opers * (reps-1)),
lower.tail = FALSE    )
if (p_val < .05) {
MS_equip = (SS_equip_error + SS_op_part_error)/((num_opers - 1)*(num_parts - 1)+(num_parts * num_opers * (reps-1)))
}else{
MS_equip = SS_equip_error / (num_parts * num_opers * (reps-1))
}
var_repeat = MS_equip
var_oper_part = (MS_part - MS_equip)/reps
var_part = (MS_part - MS_oper_part)/(reps * num_opers)
var_oper = (MS_oper - MS_oper_part)/(reps * num_parts)
if (p_val > .05) {
var_oper_part = 0
}
if(var_repeat<0){var_repeat=0}
if(var_oper_part<0){var_oper_part=0}
if(var_part<0){var_part=0}
if(var_oper<0){var_oper=0}
repeatability = var_repeat
reproducibility = var_oper + var_oper_part
total_grr = repeatability + reproducibility
part_to_part = var_part
total_var = total_grr + part_to_part
return(list(repeatability = as.double(repeatability),
reproducibility = as.double(reproducibility),
total_grr = as.double(total_grr),
part_to_part = as.double(part_to_part),
total_var = as.double(total_var)))
}
anova_var_calcs(data = data2, part = SN, operator = Operator, meas = CN28_AFT_RUNOUT)
#TODO
#Source data.R script for g/m vals
source("data.R")
xbar_repeat = function(data, part, operator, meas){
reps = data %>%
select({{part}}, {{operator}}) %>%
group_by({{part}}, {{operator}}) %>%
summarize(rep = n(), .groups = 'keep')
#Small correction here need equal number of reps across each operator/part combo
if (length(unique(reps$rep)) != 1) {
stop("Each part must have an equal number of replicates")
}
reps = unique(reps$rep)
a = data %>%
select({{part}}) %>%
distinct() %>%
count()
k = data %>%
select({{operator}}) %>%
distinct() %>%
count()
g1 = as.integer(a*k)
d = d_table %>%
filter(g == g1 & m == reps) %>%
select(d2) %>%
as.double()
xbar_rep = data %>%
select({{part}}, {{operator}}, {{meas}}) %>%
group_by({{part}}, {{operator}}) %>%
summarize(repeatbility = (max({{meas}})-min({{meas}}))/(a*k), .groups = 'keep')
repeatability = (sum(xbar_rep$repeatbility)/d)^2 #Squaring to return varComp not SD
return(repeatability)
}
xbar_reproduce = function(data, part, operator, meas){
reps = data %>%
select({{part}}, {{operator}}) %>%
group_by({{part}}, {{operator}}) %>%
summarize(rep = n(), .groups = 'keep')
#Small correction here need equal number of reps across each operator/part combo
if (length(unique(reps$rep)) != 1) {
stop("Each part must have an equal number of replicates")
}
r = unique(reps$rep)
a = data %>%
select({{part}}) %>%
distinct() %>%
count() %>%
as.integer()
m1 = data %>%
select({{operator}}) %>%
distinct() %>%
count() %>%
as.integer()
d = d_table %>%
filter(g == 1 & m == m1) %>%
select(d2) %>%
as.double()
xbar_i = data %>%
select({{operator}}, {{meas}}) %>%
group_by({{operator}}) %>%
summarize(op_avg = mean({{meas}}), .groups = 'keep')
x_diff = max(xbar_i$op_avg) - min(xbar_i$op_avg)
repeatability = xbar_repeat(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
if((x_diff *1/d)^2 - (repeatability^2/(a*r)) > 0) {
reproducibility = (x_diff *1/d)^2 - (repeatability^2/(a*r))
}else{
reproducibility = 0
}
return(reproducibility)
}
#Need to pass inputs to ss_calcs and get back g and m.
part_to_part = function(data, part, meas){
a = data %>%
select({{part}}) %>%
distinct() %>%
count() %>%
as.integer()
d = d_table %>%
filter(g == 1 & m == a) %>%
select(d2) %>%
as.double()
part_meas = data %>%
group_by({{part}}) %>%
summarize(avg_meas = mean({{meas}}), .groups = 'keep')
r_p = ((max(part_meas$avg_meas) - min(part_meas$avg_meas))/d)^2
return(r_p)
}
xbar_varcomps = function(data, part, operator = NULL, meas)  {
repeatability = xbar_repeat(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
reproducibility = xbar_reproduce(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
part_to_part = part_to_part(data = {{data}}, part = {{part}}, meas = {{meas}})
total_grr = repeatability + reproducibility
total_var = total_grr + part_to_part
return(list(
repeatability = repeatability,
reproducibility = reproducibility,
total_grr = total_grr,
part_to_part = part_to_part,
total_var = total_var
))
}
xbar_varcomps(data = data2, part = SN, operator = Operator, meas = CN28_AFT_RUNOUT)
#TO DO
#GRR comps
#Based on user selection "xbar_R" or "ANOVA"
source("anova_varcomps.R")
source("xbar_r_vacromps.R")
grr_calc = function(data, part, operator = NULL, meas, method = 'anova') {
if(method == 'anova') {
varComps = anova_var_calcs(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
if(method == 'xbar_r') {
xbar_varcomps(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
}
}
data
colnames(data) <- c('part', 'operator', 'meas')
grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'anova')
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'anova')
anova_grr
#TO DO
#GRR comps
#Based on user selection "xbar_R" or "ANOVA"
source("anova_varcomps.R")
source("xbar_r_vacromps.R")
grr_calc = function(data, part, operator = NULL, meas, method = 'anova') {
if(method == 'anova') {
varComps = anova_var_calcs(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
if(method == 'xbar_r') {
varComps(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
}
#TO DO
#GRR comps
#Based on user selection "xbar_R" or "ANOVA"
source("anova_varcomps.R")
source("xbar_r_vacromps.R")
grr_calc = function(data, part, operator = NULL, meas, method = 'anova') {
if(method == 'anova') {
varComps = anova_var_calcs(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
if(method == 'xbar_r') {
varComps(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
return(gage_eval)
}
anova_var_calcs(data = data2, part = SN, operator = Operator, meas = CN28_AFT_RUNOUT)
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'anova')
anova_grr
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'xbar_r')
#TO DO
#GRR comps
#Based on user selection "xbar_R" or "ANOVA"
source("anova_varcomps.R")
source("xbar_r_vacromps.R")
grr_calc = function(data, part, operator = NULL, meas, method = 'anova') {
if(method == 'anova') {
varComps = anova_var_calcs(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
if(method == 'xbar_r') {
varComps = xbar_varcomps(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
}
return(gage_eval)
}
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'anova')
anova_grr
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'xbar_r')
anova_grr
colnames(anova_grr)
#TO DO
#GRR comps
#Based on user selection "xbar_R" or "ANOVA"
source("anova_varcomps.R")
source("xbar_r_vacromps.R")
grr_calc = function(data, part, operator = NULL, meas, method = 'anova') {
if(method == 'anova') {
varComps = anova_var_calcs(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
colnames(gage_eval) <- 'VarComp'
}
if(method == 'xbar_r') {
varComps = xbar_varcomps(data = {{data}}, part = {{part}}, operator = {{operator}}, meas = {{meas}})
gage_eval = data.frame(matrix(unlist(varComps)))
row.names(gage_eval) <-names(varComps)
colnames(gage_eval) <- 'VarComp'
}
return(gage_eval)
}
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'anova')
xbar_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'xbar_r')
anova_grr
xbar_grr
SN = c(
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_01',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_02',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03',
'SerialNumber_03')
Operator = c(
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_02',
'Operator_02',
'Operator_02',
'Operator_03',
'Operator_03',
'Operator_03',
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_02',
'Operator_02',
'Operator_02',
'Operator_03',
'Operator_03',
'Operator_03',
'Operator_01',
'Operator_01',
'Operator_01',
'Operator_02',
'Operator_02',
'Operator_02',
'Operator_03',
'Operator_03',
'Operator_03')
Measure = c(
0.0173,
0.0151,
0.0173,
0.0163,
0.0155,
0.0175,
0.0162,
0.0161,
0.0162,
0.0212,
0.0199,
0.0181,
0.0201,
0.0201,
0.0221,
0.0212,
0.0182,
0.0204,
0.0096,
0.0099,
0.0088,
0.0077,
0.0099,
0.0091,
0.0094,
0.0097,
0.0093)
data = data.frame(SN = SN,
Operator = Operator,
Measure = Measure)
usethis::use_data(my_pkg_data)
usethis::use_data(data)
usethis::use_data_raw("data")
library(gageRR)
library(openxlsx)
data = read.xlsx('C://Users//warre//Downloads//grr_trial.xlsx')
colnames(data) <- c('part', 'operator', 'meas')
anova_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'anova')
xbar_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'xbar_r')
anova_grr
xbar_grr
xbar_grr = grr_calc(data = data, part = part, operator = operator, meas = meas, method = 'xbar_r', USL = .040)
xbar_grr
usethis::use_vignette("gageRR_vignette", "Analyzing Gage Repeatability and Reproducibility with gageRR")
library(gageRR)
library(gageRR)
head(data)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
library(gageRR)
?ss_calc
?ss_calcs
library(gageRR)
?xbar_varcomps
?xbar_r_varcomps
?ss_calcs
?anova_var_calcs
?xbar_repeat
library(gageRR)
?xbar_reproduce
library(gageRR)
?grr_calc
library(gageRR)
install.packages("hexSticker")
imgurl <- system.file("C://Users//warre//OneDrive//Documents//VernierCalipers.png", package="hexSticker")
sticker(imgurl, package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="C://Users//warre//OneDrive//Documents//Hex_VernierCalipers.png")
library(hexSticker)
sticker(imgurl, package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="C://Users//warre//OneDrive//Documents//Hex_VernierCalipers.png")
imgurl <- system.file("C://Users//warre//Downloads//VernierCalipers.png", package="hexSticker")
sticker(imgurl, package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
library(ggplot2)
p <- ggplot(aes(x = mpg, y = wt), data = mtcars) + geom_point()
p <- p + theme_void() + theme_transparent()
sticker(p, package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=1.3, s_height=1,
filename="inst/figures/ggplot2.png")
sticker(p, package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=1.3, s_height=1,
+         filename="C://Users//warre//Downloads//HexVernierCalipers.png")
sticker(p, package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=1.3, s_height=1,
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="hexSticker", p_size=20, s_x=1, s_y=.75, s_width=.6,
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=.75, s_width=.6,
h_fill="white", h_color="#f39c12",
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=1, s_width=.6,
h_fill="white", h_color="#f39c12",p_color = "black",
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
imgurl <- system.file("C://Users//warre//Downloads//VernierCalipers.png", package="hexSticker")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=.9, s_width=.6,
h_fill="white", h_color="#f39c12",p_color = "black",
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
imgurl <- system.file("C://Users//warre//Downloads//VernierCalipers.png", package="hexSticker")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=.8, s_width=.6,
h_fill="white", h_color="#f39c12",p_color = "black",
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
imgurl <- system.file("C://Users//warre//Downloads//VernierCalipers.png", package="hexSticker")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=1, s_width=.6,
h_fill="white", h_color="#f39c12",p_color = "black",p_y, 1.6
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=1, s_width=.6,
h_fill="white", h_color="#f39c12",p_color = "black",p_y= 1.6,
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
sticker("C://Users//warre//Downloads//VernierCalipers.png", package="gageRR", p_size=20, s_x=1, s_y=.9, s_width=.6,
h_fill="white", h_color="#f39c12",p_color = "black",p_y= 1.5,
filename="C://Users//warre//Downloads//HexVernierCalipers.png")
usethis::use_logo("C://Users//warre//Downloads//HexVernierCalipers.png")
library(gageRR)
devtools::check()
install.packages('devtools')
devtools::check()
install.packages('dplyr')
devtools::check()
devtools::check()
devtools::check()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_mac_release()
library('httr')
install.packages('httr')
devtools::check_mac_release()
devtools::check_win_devel()
devtools::check_win_devel()
install.packages('ggplot2')
install.packages('ggplot2')
devtools::check_win_devel()
devtools::check_mac_release()
install.packages("tinytex")
tinytex::install_tinytex()
remotes::install_version("roxygen2", version = "7.3.3")
